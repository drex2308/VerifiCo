export type Datastore = import('interface-datastore').Datastore;
/**
 * @param {string} location
 * @param {string} name
 * @param {*} options
 * @returns {Datastore}
 */
export function createStore(location: string, name: string, options: any): Datastore;
/**
 * @param {Key} key
 * @param {function (Key): Promise<boolean>} has
 * @param {Datastore} store
 * @returns {Promise<boolean>}
 */
export function hasWithFallback(key: Key, has: (arg0: Key) => Promise<boolean>, store: Datastore): Promise<boolean>;
/**
 * @param {import('interface-datastore').Key} key
 * @param {function (Key): Promise<Uint8Array>} get
 * @param {function (Key): Promise<boolean>} has
 * @param {import('interface-datastore').Datastore} store
 * @returns {Promise<Uint8Array>}
 */
export function getWithFallback(key: import('interface-datastore').Key, get: (arg0: Key) => Promise<Uint8Array>, has: (arg0: Key) => Promise<boolean>, store: import('interface-datastore').Datastore): Promise<Uint8Array>;
/**
 * Level dbs wrap level dbs that wrap level dbs. Find a level-js
 * instance in the chain if one exists.
 *
 * @param {Datastore} store
 * @returns {Datastore | undefined}
 */
export function findLevelJs(store: Datastore): Datastore | undefined;
/**
 * @typedef {import('interface-datastore').Datastore} Datastore
 */
export const CONFIG_KEY: Key;
export const VERSION_KEY: Key;
import { Key } from "interface-datastore";
//# sourceMappingURL=utils.d.ts.map