declare const _exports: {
    [n: number]: import("../src/types").Migration;
    length: number;
    toString(): string;
    toLocaleString(): string;
    pop(): import("../src/types").Migration | undefined;
    push(...items: import("../src/types").Migration[]): number;
    concat(...items: ConcatArray<import("../src/types").Migration>[]): import("../src/types").Migration[];
    concat(...items: (import("../src/types").Migration | ConcatArray<import("../src/types").Migration>)[]): import("../src/types").Migration[];
    join(separator?: string | undefined): string;
    reverse(): import("../src/types").Migration[];
    shift(): import("../src/types").Migration | undefined;
    slice(start?: number | undefined, end?: number | undefined): import("../src/types").Migration[];
    sort(compareFn?: ((a: import("../src/types").Migration, b: import("../src/types").Migration) => number) | undefined): import("../src/types").Migration[];
    splice(start: number, deleteCount?: number | undefined): import("../src/types").Migration[];
    splice(start: number, deleteCount: number, ...items: import("../src/types").Migration[]): import("../src/types").Migration[];
    unshift(...items: import("../src/types").Migration[]): number;
    indexOf(searchElement: import("../src/types").Migration, fromIndex?: number | undefined): number;
    lastIndexOf(searchElement: import("../src/types").Migration, fromIndex?: number | undefined): number;
    every<S extends import("../src/types").Migration>(predicate: (value: import("../src/types").Migration, index: number, array: import("../src/types").Migration[]) => value is S, thisArg?: any): this is S[];
    every(predicate: (value: import("../src/types").Migration, index: number, array: import("../src/types").Migration[]) => unknown, thisArg?: any): boolean;
    some(predicate: (value: import("../src/types").Migration, index: number, array: import("../src/types").Migration[]) => unknown, thisArg?: any): boolean;
    forEach(callbackfn: (value: import("../src/types").Migration, index: number, array: import("../src/types").Migration[]) => void, thisArg?: any): void;
    map<U>(callbackfn: (value: import("../src/types").Migration, index: number, array: import("../src/types").Migration[]) => U, thisArg?: any): U[];
    filter<S_1 extends import("../src/types").Migration>(predicate: (value: import("../src/types").Migration, index: number, array: import("../src/types").Migration[]) => value is S_1, thisArg?: any): S_1[];
    filter(predicate: (value: import("../src/types").Migration, index: number, array: import("../src/types").Migration[]) => unknown, thisArg?: any): import("../src/types").Migration[];
    reduce(callbackfn: (previousValue: import("../src/types").Migration, currentValue: import("../src/types").Migration, currentIndex: number, array: import("../src/types").Migration[]) => import("../src/types").Migration): import("../src/types").Migration;
    reduce(callbackfn: (previousValue: import("../src/types").Migration, currentValue: import("../src/types").Migration, currentIndex: number, array: import("../src/types").Migration[]) => import("../src/types").Migration, initialValue: import("../src/types").Migration): import("../src/types").Migration;
    reduce<U_1>(callbackfn: (previousValue: U_1, currentValue: import("../src/types").Migration, currentIndex: number, array: import("../src/types").Migration[]) => U_1, initialValue: U_1): U_1;
    reduceRight(callbackfn: (previousValue: import("../src/types").Migration, currentValue: import("../src/types").Migration, currentIndex: number, array: import("../src/types").Migration[]) => import("../src/types").Migration): import("../src/types").Migration;
    reduceRight(callbackfn: (previousValue: import("../src/types").Migration, currentValue: import("../src/types").Migration, currentIndex: number, array: import("../src/types").Migration[]) => import("../src/types").Migration, initialValue: import("../src/types").Migration): import("../src/types").Migration;
    reduceRight<U_2>(callbackfn: (previousValue: U_2, currentValue: import("../src/types").Migration, currentIndex: number, array: import("../src/types").Migration[]) => U_2, initialValue: U_2): U_2;
    find<S_2 extends import("../src/types").Migration>(predicate: (this: void, value: import("../src/types").Migration, index: number, obj: import("../src/types").Migration[]) => value is S_2, thisArg?: any): S_2 | undefined;
    find(predicate: (value: import("../src/types").Migration, index: number, obj: import("../src/types").Migration[]) => unknown, thisArg?: any): import("../src/types").Migration | undefined;
    findIndex(predicate: (value: import("../src/types").Migration, index: number, obj: import("../src/types").Migration[]) => unknown, thisArg?: any): number;
    fill(value: import("../src/types").Migration, start?: number | undefined, end?: number | undefined): import("../src/types").Migration[];
    copyWithin(target: number, start: number, end?: number | undefined): import("../src/types").Migration[];
    [Symbol.iterator](): IterableIterator<import("../src/types").Migration>;
    entries(): IterableIterator<[number, import("../src/types").Migration]>;
    keys(): IterableIterator<number>;
    values(): IterableIterator<import("../src/types").Migration>;
    [Symbol.unscopables](): {
        copyWithin: boolean;
        entries: boolean;
        fill: boolean;
        find: boolean;
        findIndex: boolean;
        keys: boolean;
        values: boolean;
    };
    includes(searchElement: import("../src/types").Migration, fromIndex?: number | undefined): boolean;
    flatMap<U_3, This = undefined>(callback: (this: This, value: import("../src/types").Migration, index: number, array: import("../src/types").Migration[]) => U_3 | readonly U_3[], thisArg?: This | undefined): U_3[];
    flat<A, D extends number = 1>(this: A, depth?: D | undefined): FlatArray<A, D>[];
};
export = _exports;
//# sourceMappingURL=index.d.ts.map