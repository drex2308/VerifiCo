export = RoutingTable;
/**
 * @typedef {import('peer-id')} PeerId
 *
 * @typedef {object} KBucketPeer
 * @property {Uint8Array} id
 * @property {PeerId} peer
 */
/**
 * A wrapper around `k-bucket`, to provide easy store and
 * retrieval for peers.
 */
declare class RoutingTable {
    /**
     * @param {PeerId} self
     * @param {number} kBucketSize
     */
    constructor(self: PeerId, kBucketSize: number);
    self: import("peer-id");
    /**
     * Called on the `ping` event from `k-bucket`.
     * Currently this just removes the oldest contact from
     * the list, without actually pinging the individual peers.
     * This is the same as go does, but should probably
     * be upgraded to actually ping the individual peers.
     *
     * @param {KBucketPeer[]} oldContacts
     * @param {KBucketPeer} newContact
     */
    _onPing(oldContacts: KBucketPeer[], newContact: KBucketPeer): void;
    /**
     * @param {number} kBucketSize
     */
    _onInit(kBucketSize: number): Promise<void>;
    kb: any;
    /**
     * Amount of currently stored peers.
     */
    get size(): any;
    /**
     * Find a specific peer by id.
     *
     * @param {PeerId} peer
     * @returns {Promise<PeerId | undefined>}
     */
    find(peer: PeerId): Promise<PeerId | undefined>;
    /**
     * Retrieve the closest peers to the given key.
     *
     * @param {Uint8Array} key
     */
    closestPeer(key: Uint8Array): import("peer-id") | undefined;
    /**
     * Retrieve the `count`-closest peers to the given key.
     *
     * @param {Uint8Array} key
     * @param {number} count
     */
    closestPeers(key: Uint8Array, count: number): import("peer-id")[];
    /**
     * Add or update the routing table with the given peer.
     *
     * @param {PeerId} peer
     */
    add(peer: PeerId): Promise<void>;
    /**
     * Remove a given peer from the table.
     *
     * @param {PeerId} peer
     */
    remove(peer: PeerId): Promise<void>;
}
declare namespace RoutingTable {
    export { PeerId, KBucketPeer };
}
type KBucketPeer = {
    id: Uint8Array;
    peer: PeerId;
};
type PeerId = import("peer-id");
//# sourceMappingURL=routing.d.ts.map