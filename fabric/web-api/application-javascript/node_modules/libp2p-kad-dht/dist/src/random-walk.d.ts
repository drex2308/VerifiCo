export = RandomWalk;
/**
 * @typedef {import('./')} DHT
 * @typedef {import('./').RandomWalkOptions} RandomWalkOptions
 */
declare class RandomWalk {
    /**
     * @class
     * @param {DHT} dht
     * @param {RandomWalkOptions} options
     */
    constructor(dht: DHT, options: RandomWalkOptions);
    _kadDHT: import(".");
    _options: {
        /**
         * discovery enabled (default: true)
         */
        enabled: boolean;
        /**
         * how many queries to run per period (default: 1)
         */
        queriesPerPeriod: number;
        /**
         * how often to run the the random-walk process, in milliseconds (default: 300000)
         */
        interval: number;
        /**
         * how long to wait for the the random-walk query to run, in milliseconds (default: 30000)
         */
        timeout: number;
        /**
         * how long to wait before starting the first random walk, in milliseconds (default: 10000)
         */
        delay: number;
    };
    log: debug.Debugger & {
        error: debug.Debugger;
    };
    _timeoutId: NodeJS.Timeout | undefined;
    /**
     * Start the Random Walk process. This means running a number of queries
     * every interval requesting random data. This is done to keep the dht
     * healthy over time.
     *
     * @returns {void}
     */
    start(): void;
    /**
     * Stop the random-walk process. Any active
     * queries will be aborted.
     *
     * @returns {void}
     */
    stop(): void;
    /**
     * Run function `randomWalk._walk` on every `options.interval` ms
     *
     * @private
     */
    private _runPeriodically;
    /**
     * Do the random walk work.
     *
     * @param {number} queries
     * @param {number} walkTimeout
     *
     * @private
     */
    private _walk;
    _controller: AbortController | null | undefined;
    /**
     * The query run during a random walk request.
     *
     * TODO: While query currently supports an abort controller, it is not
     * yet supported by `DHT.findPeer`. Once https://github.com/libp2p/js-libp2p-kad-dht/pull/82
     * is complete, and AbortController support has been added to the
     * DHT query functions, the abort here will just work, provided the
     * functions support `options.signal`. Once done, this todo should be
     * removed.
     *
     * @param {PeerId} id
     * @param {object} options
     * @param {number} options.timeout
     * @param {AbortSignal} options.signal
     *
     * @private
     */
    private _query;
    /**
     * Generate a random peer id for random-walk purposes.
     *
     * @returns {Promise<PeerId>}
     *
     * @private
     */
    private _randomPeerId;
}
declare namespace RandomWalk {
    export { DHT, RandomWalkOptions };
}
import { AbortController } from "abort-controller";
type DHT = import(".");
type RandomWalkOptions = {
    /**
     * discovery enabled (default: true)
     */
    enabled: boolean;
    /**
     * how many queries to run per period (default: 1)
     */
    queriesPerPeriod: number;
    /**
     * how often to run the the random-walk process, in milliseconds (default: 300000)
     */
    interval: number;
    /**
     * how long to wait for the the random-walk query to run, in milliseconds (default: 30000)
     */
    timeout: number;
    /**
     * how long to wait before starting the first random walk, in milliseconds (default: 10000)
     */
    delay: number;
};
//# sourceMappingURL=random-walk.d.ts.map