export = NamespaceDatastore;
/**
 * @typedef {import('interface-datastore').Datastore} Datastore
 * @typedef {import('interface-datastore').Query} Query
 * @typedef {import('interface-datastore').KeyQuery} KeyQuery
 * @typedef {import('interface-datastore').Options} Options
 * @typedef {import('interface-datastore').Batch} Batch
 * @typedef {import('./types').KeyTransform} KeyTransform
 */
/**
 * Wraps a given datastore into a keytransform which
 * makes a given prefix transparent.
 *
 * For example, if the prefix is `new Key(/hello)` a call
 * to `store.put(new Key('/world'), mydata)` would store the data under
 * `/hello/world`.
 *
 */
declare class NamespaceDatastore extends KeytransformDatastore {
    /**
     * @param {Datastore} child
     * @param {Key} prefix
     */
    constructor(child: Datastore, prefix: Key);
    prefix: Key;
}
declare namespace NamespaceDatastore {
    export { Datastore, Query, KeyQuery, Options, Batch, KeyTransform };
}
import KeytransformDatastore = require("./keytransform");
import Key_1 = require("interface-datastore/dist/src/key");
import Key = Key_1.Key;
type Datastore = import("interface-datastore/dist/src/types").Datastore;
type Query = import("interface-datastore/dist/src/types").Query;
type KeyQuery = import("interface-datastore/dist/src/types").KeyQuery;
type Options = import("interface-datastore/dist/src/types").Options;
type Batch = import("interface-datastore/dist/src/types").Batch;
type KeyTransform = import("./types").KeyTransform;
//# sourceMappingURL=namespace.d.ts.map