export = ShardingDatastore;
/**
 * @typedef {import('interface-datastore').Datastore} Datastore
 * @typedef {import('interface-datastore').Options} Options
 * @typedef {import('interface-datastore').Batch} Batch
 * @typedef {import('interface-datastore').Query} Query
 * @typedef {import('interface-datastore').QueryFilter} QueryFilter
 * @typedef {import('interface-datastore').QueryOrder} QueryOrder
 * @typedef {import('interface-datastore').KeyQuery} KeyQuery
 * @typedef {import('interface-datastore').KeyQueryFilter} KeyQueryFilter
 * @typedef {import('interface-datastore').KeyQueryOrder} KeyQueryOrder
 * @typedef {import('interface-datastore').Pair} Pair
 * @typedef {import('./types').Shard} Shard
 *
 */
/**
 * @template TValue
 * @typedef {import('./types').Await<TValue> } Await
 */
/**
 * Backend independent abstraction of go-ds-flatfs.
 *
 * Wraps another datastore such that all values are stored
 * sharded according to the given sharding function.
 */
declare class ShardingDatastore extends Adapter {
    /**
     * @deprecated
     * @param {Datastore} store
     * @param {Shard} shard
     */
    static createOrOpen(store: Datastore, shard: Shard): Promise<import("./sharding")>;
    /**
     * @deprecated
     * @param {Datastore} store
     */
    static open(store: Datastore): Promise<import("./sharding")>;
    /**
     * @param {Datastore} store
     * @param {Shard} shard
     */
    static create(store: Datastore, shard: Shard): Promise<import("./types").Shard>;
    /**
     * @param {Datastore} store
     * @param {Shard} shard
     */
    constructor(store: Datastore, shard: Shard);
    child: KeytransformStore;
    shard: import("./types").Shard;
    /**
     * @param {Key} key
     */
    _convertKey(key: Key): Key;
    /**
     * @param {Key} key
     */
    _invertKey(key: Key): Key;
}
declare namespace ShardingDatastore {
    export { Datastore, Options, Batch, Query, QueryFilter, QueryOrder, KeyQuery, KeyQueryFilter, KeyQueryOrder, Pair, Shard, Await };
}
import { Adapter } from "interface-datastore";
import KeytransformStore = require("./keytransform");
import { Key } from "interface-datastore";
type Datastore = import("interface-datastore/dist/src/types").Datastore;
type Shard = import("./types").Shard;
type Options = import("interface-datastore/dist/src/types").Options;
type Batch = import("interface-datastore/dist/src/types").Batch;
type Query = import("interface-datastore/dist/src/types").Query;
type QueryFilter = (item: import("interface-datastore/dist/src/types").Pair) => boolean;
type QueryOrder = (a: import("interface-datastore/dist/src/types").Pair, b: import("interface-datastore/dist/src/types").Pair) => 0 | 1 | -1;
type KeyQuery = import("interface-datastore/dist/src/types").KeyQuery;
type KeyQueryFilter = (item: Key) => boolean;
type KeyQueryOrder = (a: Key, b: Key) => 0 | 1 | -1;
type Pair = import("interface-datastore/dist/src/types").Pair;
type Await<TValue> = TValue | Promise<TValue>;
//# sourceMappingURL=sharding.d.ts.map