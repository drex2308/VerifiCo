export = KeyTransformDatastore;
/**
 * @typedef {import('interface-datastore').Datastore} Datastore
 * @typedef {import('interface-datastore').Options} Options
 * @typedef {import('interface-datastore').Batch} Batch
 * @typedef {import('interface-datastore').Query} Query
 * @typedef {import('interface-datastore').KeyQuery} KeyQuery
 * @typedef {import('interface-datastore').Key} Key
 * @typedef {import('./types').KeyTransform} KeyTransform
 */
/**
 * A datastore shim, that wraps around a given datastore, changing
 * the way keys look to the user, for example namespacing
 * keys, reversing them, etc.
 *
 * @implements {Datastore}
 */
declare class KeyTransformDatastore extends Adapter implements Datastore {
    /**
     * @param {Datastore} child
     * @param {KeyTransform} transform
     */
    constructor(child: Datastore, transform: KeyTransform);
    child: import("interface-datastore/dist/src/types").Datastore;
    transform: import("./types").KeyTransform;
}
declare namespace KeyTransformDatastore {
    export { Datastore, Options, Batch, Query, KeyQuery, Key, KeyTransform };
}
import { Adapter } from "interface-datastore";
type Datastore = import("interface-datastore/dist/src/types").Datastore;
type KeyTransform = import("./types").KeyTransform;
type Options = import("interface-datastore/dist/src/types").Options;
type Batch = import("interface-datastore/dist/src/types").Batch;
type Query = import("interface-datastore/dist/src/types").Query;
type KeyQuery = import("interface-datastore/dist/src/types").KeyQuery;
type Key = import("interface-datastore/dist/src/key");
//# sourceMappingURL=keytransform.d.ts.map