export type Datastore = import("interface-datastore/dist/src/types").Datastore;
export type Shard = import("./types").Shard;
import readme = require("./shard-readme");
/**
 * Convert a given string to the matching sharding function.
 *
 * @param {string} str
 * @returns {Shard}
 */
export function parseShardFun(str: string): Shard;
/**
 * @param {string | Uint8Array} path
 * @param {Datastore} store
 */
export function readShardFun(path: string | Uint8Array, store: Datastore): Promise<import("./types").Shard>;
/**
 * @implements {Shard}
 */
export class Prefix extends ShardBase implements Shard {
    /**
     * @param {number} prefixLen
     */
    constructor(prefixLen: number);
}
export class Suffix extends ShardBase {
    /**
     * @param {number} suffixLen
     */
    constructor(suffixLen: number);
}
export class NextToLast extends ShardBase {
    /**
     * @param {number} suffixLen
     */
    constructor(suffixLen: number);
}
export const README_FN: "_README";
export const SHARDING_FN: "SHARDING";
/**
 * @typedef {import('interface-datastore').Datastore} Datastore
 * @typedef {import('./types').Shard} Shard
 */
export const PREFIX: "/repo/flatfs/shard/";
/**
 * @implements {Shard}
 */
declare class ShardBase implements Shard {
    /**
     * @param {any} param
     */
    constructor(param: any);
    param: any;
    name: string;
    _padding: string;
    /**
     * @param {string} s
     */
    fun(s: string): string;
    toString(): string;
}
export { readme };
//# sourceMappingURL=shard.d.ts.map